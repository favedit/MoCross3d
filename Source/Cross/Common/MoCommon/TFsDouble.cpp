#include "MoCmFormat.h"
#include "MoCmLanguage.h"

MO_NAMESPACE_BEGIN

//============================================================
// <T>构造双精度数字符串。</T>
//============================================================
TFsDouble::TFsDouble(){
   Set(0.0f);
}

//============================================================
// <T>构造双精度数字符串。</T>
//
// @param value 双精度数
//============================================================
TFsDouble::TFsDouble(TDouble value){
   Set(value);
}

//============================================================
// <T>构造双精度数字符串。</T>
//
// @param pValue 字符串
//============================================================
TFsDouble::TFsDouble(TCharC* pValue){
   Parse(pValue);
}

//============================================================
// <T>构造双精度数字符串。</T>
//
// @param ptr 字符串指针
//============================================================
TFsDouble::TFsDouble(const TStringPtrC& ptr){
   Parse(ptr.MemoryC());
}

//============================================================
// <T>构造双精度数字符串。</T>
//
// @param value 双精度数字符串
//============================================================
TFsDouble::TFsDouble(const TFsDouble& value){
   Parse(value.MemoryC());
}

//============================================================
// <T>赋值操作。</T>
//
// @param value 双精度数
//============================================================
void TFsDouble::operator=(TDouble value){
   Set(value);
}

//============================================================
// <T>赋值操作。</T>
//
// @param pValue 字符串
//============================================================
void TFsDouble::operator=(TCharC* pValue){
   Parse(pValue);
}

//============================================================
// <T>赋值操作。</T>
//
// @param ptr 字符串指针
//============================================================
void TFsDouble::operator=(const TStringPtrC& ptr){
   Parse(ptr.MemoryC());
}

//============================================================
// <T>赋值操作。</T>
//
// @param value 双精度数字符串
//============================================================
void TFsDouble::operator=(const TFsDouble& value){
   Parse(value.MemoryC());
}

//============================================================
// <T>获得双精度数内容。</T>
//
// @return 双精度数
//============================================================
TDouble TFsDouble::Get(){
   return _value;
}

//============================================================
// <T>设置双精度数内容。</T>
//
// @param value 双精度数
//============================================================
void TFsDouble::Set(TDouble value){
   _value = value;
   RDouble::ToString(_value, _memory, _capacity);
   Fix();
}

//============================================================
// <T>从字符串解析双精度数内容。</T>
//
// @return 双精度数
//============================================================
TDouble TFsDouble::Parse(){
   return RDouble::Parse(_memory);
}

//============================================================
// <T>从字符串解析双精度数内容。</T>
//
// @param pValue 字符串
// @return 双精度数
//============================================================
TDouble TFsDouble::Parse(TCharC* pValue){
   _value = RDouble::Parse(pValue);
   Assign(pValue);
   return _value;
}

//============================================================
// <T>返回字符串。</T>
//
// @return 字符串
//============================================================
TCharC* TFsDouble::ToString(){
   return RDouble::ToString(_value, _memory, _capacity);
}

MO_NAMESPACE_END
