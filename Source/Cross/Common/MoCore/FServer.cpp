#include "MoCrServer.h"

MO_NAMESPACE_BEGIN

//============================================================
// <T>构造服务器的实例。</T>
//
// @return 服务器的实例
//============================================================
FServer::FServer(){
   _code = 0;
   _stop = EFalse;
   _ready = EFalse;
}

//============================================================
// <T>析构服务器的实例。</T>
//============================================================
FServer::~FServer(){
}

//============================================================
// <T>构造处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Construct(){
   return ESuccess;
}

//============================================================
// <T>析构处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Dispose(){
   return ESuccess;
}

//============================================================
// <T>初始化服务器的实例。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Initialize(){
   MO_INFO(TC("Server '%s' initialize."), (TCharC*)_name);
   OnConstruct();
   return ESuccess;
}

//============================================================
// <T>释放服务器的实例。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Release(){
   MO_INFO(TC("Server '%s' release."), (TCharC*)_name);
   return ESuccess;
}

//============================================================
// <T>获得唯一对象类型。</T>
//
// @return 唯一对象类型
//============================================================
ESingleton FServer::SingletonType(){
   return ESingleton_Server;
}

//============================================================
// <T>获得服务器的代码。</T>
//
// @return 服务器的代码
//============================================================
TInt FServer::Code(){
   return _code;
}

//============================================================
// <T>获得服务器的名称。</T>
//
// @return 服务器的名称
//============================================================
TCharC* FServer::Name(){
   return _name;
}

//============================================================
// <T>获得是否结束服务。</T>
//
// @return 是否结束服务
//============================================================
TBool FServer::IsStop() const{
   return _stop;
}

//============================================================
// <T>获得是否准备好。</T>
//
// @return 是否准备好
//============================================================
TBool FServer::IsReady() const{
   return _ready;
}

//============================================================
// <T>响应构造处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnConstruct(){
   return ESuccess;
}

//============================================================
// <T>响应初始化处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnInitialize(){
   return ESuccess;
}

//============================================================
// <T>响应加载设置处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnLoadConfig(){
   return ESuccess;
}

//============================================================
// <T>响应加载模块处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnLoadModules(){
   return ETrue;
}

//============================================================
// <T>响应加载监视处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnLoadMonitors(){
   return ESuccess;
}

//============================================================
// <T>响应加载服务处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnLoadServices(){
   return ESuccess;
}

//============================================================
// <T>响应服务器状态处理。</T>
//
// @param status 服务器的状态处理
// @return 处理结果
//============================================================
TResult FServer::OnStatus(TInt status){
   return ESuccess;
}

//============================================================
// <T>响应服务器操作处理。</T>
//
// @param command 服务器的操作处理
// @return 处理结果
//============================================================
TResult FServer::OnCommand(EServerCommand command){
   return ESuccess;
}

//============================================================
// <T>响应启动处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnStartup(){
   return ESuccess;
}

//============================================================
// <T>响应服务处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnProcess(){
   return ESuccess;
}

//============================================================
// <T>服务器重新加载操作。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnReload(){
   return ESuccess;
}

//============================================================
// <T>服务器卸载处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnUnload(){
   return ESuccess;
}

//============================================================
// <T>响应挂起处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnSuspend(){
   return ESuccess;
}

//============================================================
// <T>响应继续处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnResume(){
   return ESuccess;
}

//============================================================
// <T>响应关闭处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnShutdown(){
   return ESuccess;
}

//============================================================
// <T>响应销毁处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::OnDestory(){
   return ESuccess;
}

//============================================================
// <T>响应服务器状态命令。</T>
//
// @param status 服务器的状态命令
// @return 处理结果
//============================================================
TResult FServer::DoStatus(TInt status){
   MO_INFO(TC("Server '%s' status event. (status=%d)."), (TCharC*)_name, status);
   return OnStatus(status);
}


//============================================================
// <T>响应服务器操作命令。</T>
//
// @param command 服务器的操作命令
// @return 处理结果
//============================================================
TResult FServer::DoCommand(EServerCommand command){
   MO_INFO(TC("Server '%s' command event. (command=%d)."), (TCharC*)_name, command);
   TBool result = OnCommand(command);
   // 处理命令
   if(result){
      switch(command){
         case EServerCommand_Reload:
            Reload();
            break;
         case EServerCommand_Suspend:
            Suspend();
            break;
         case EServerCommand_Resume:
            Resume();
            break;
         default:
            break;
      }
   }
   return ESuccess;
}

//============================================================
// <T>服务器启动处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Startup(){
   MO_INFO(TC("Server '%s' startup."), (TCharC*)_name);
   _stop = EFalse;
   return OnStartup();
}

//============================================================
// <T>服务器加载操作。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Launch(){
   // 构造
   MO_INFO(TC("'%s' server construct."), (TCharC*)_name);
   OnConstruct();
   // 加载所有设置
   MO_INFO(TC("'%s' server load config."), (TCharC*)_name);
   OnLoadConfig();
   // 初始化
   MO_INFO(TC("'%s' server initialize."), (TCharC*)_name);
   OnInitialize();
   // 加载所有模块
   MO_INFO(TC("'%s' server load modules."), (TCharC*)_name);
   OnLoadModules();
   // 加载所有监视器
   MO_INFO(TC("'%s' server load monitors."), (TCharC*)_name);
   OnLoadMonitors();
   // 加载所有服务
   MO_INFO(TC("'%s' server load services."), (TCharC*)_name);
   OnLoadServices();
   return ESuccess;
}

//============================================================
// <T>处理服务。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Process(){
   MO_INFO(TC("Server '%s' process."), (TCharC*)_name);
   return OnProcess();
}

//============================================================
// <T>服务器重新加载操作。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Reload(){
   MO_INFO(TC("Server '%s' reload."), (TCharC*)_name);
   return OnReload();
}

//============================================================
// <T>服务器卸载处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Unload(){
   MO_INFO(TC("Server '%s' unload."), (TCharC*)_name);
   return OnUnload();
}

//============================================================
// <T>服务器挂起操作。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Suspend(){
   MO_INFO(TC("Server '%s' suspend."), (TCharC*)_name);
   return OnSuspend();
}

//============================================================
// <T>服务器继续操作。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Resume(){
   MO_INFO(TC("Server '%s' resume."), (TCharC*)_name);
   return OnResume();
}

//============================================================
// <T>服务器关闭处理。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Shutdown(){
   MO_INFO(TC("Server '%s' shutdown."), (TCharC*)_name);
   _stop = ETrue;
   return OnShutdown();
}

//============================================================
// <T>服务器销毁操作。</T>
//
// @return 处理结果
//============================================================
TResult FServer::Destory(){
   MO_INFO(TC("Server '%s' destory."), (TCharC*)_name);
   return OnDestory();
}

MO_NAMESPACE_END
